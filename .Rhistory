url_csv,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE
) %>% as_tibble()
# Rename columns
colnames(pop) <- c("region", "gender", "age", "year", "statisticalVariable", "population")
# Convert data types if necessary
pop <- pop %>%
mutate(
year = as.numeric(year),
population = as.numeric(population)
)
# Fetch and process data for the second dataset (Population changes)
url_csv_new <- "https://data.ssb.no/api/v0/dataset/49626.csv?lang=no"
# Read data into 'pop_changes' data frame
pop_changes <- read_delim(
url_csv_new,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE,
na = ".."
) %>% as_tibble()
# Rename columns
colnames(pop_changes) <- c("region", "year", "contents", "value")
# Convert data types
pop_changes <- pop_changes %>%
mutate(
year = as.numeric(year),
value = as.numeric(value)
)
# Define UI
ui <- fluidPage(
titlePanel("Norsk Befolkningsdashboard"),
sidebarLayout(
sidebarPanel(
sliderInput("year_range", "Velg år:",
min = max(min(pop$year), min(pop_changes$year)),
max = min(max(pop$year), max(pop_changes$year)),
value = c(max(min(pop$year), min(pop_changes$year)),
min(max(pop$year), max(pop_changes$year))),
step = 1,
sep = "")
),
mainPanel(
fluidRow(
plotOutput("popPlot"),
plotOutput("birthsDeathsPlot")
),
fluidRow(
tableOutput("popTable")
)
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive data for the first plot
filtered_data <- reactive({
pop %>%
filter(
year >= input$year_range[1],
year <= input$year_range[2]
) %>%
group_by(year) %>%
summarise(totalPopulation = sum(population, na.rm = TRUE))
})
# Reactive data for the second plot
births_deaths_data <- reactive({
pop_changes %>%
filter(
contents %in% c("Levendefødte", "Døde"),
pop_changes %>% colnames()
pop %>% colnames()
# Clear the workspace
rm(list = ls())
# Load required libraries
library(tidyverse)
library(shiny)
library(readr)
library(stringr)
# Set encoding option
options(encoding = "UTF-8")
# Fetch and process data for the first dataset (Population by gender and age)
url_csv <- "https://data.ssb.no/api/v0/dataset/1082.csv?lang=no"
# Read data into 'pop' data frame with UTF-8 encoding
pop <- read_delim(
url_csv,
delim = ";",
locale = locale(encoding = "UTF-8"), # Changed to UTF-8
trim_ws = TRUE
) %>% as_tibble()
# Clear the workspace
rm(list = ls())
# Load required libraries
library(tidyverse)
library(shiny)
library(readr)
# Fetch and process data
url_csv <- "https://data.ssb.no/api/v0/dataset/1082.csv?lang=no"
# Read data into 'pop' data frame
pop <- read_delim(
url_csv,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE
) %>% as_tibble()
# Rename columns
colnames(pop) <- c("region", "gender", "age", "year", "statisticalVariable", "population")
# Verify column names
print(colnames(pop))
# Convert data types if necessary
pop <- pop %>%
mutate(
year = as.numeric(year),
population = as.numeric(population)
)
# Verify unique regions and genders
print(unique(pop$region))
print(unique(pop$gender))
# Fetch and process data for the second dataset (Population changes)
url_csv_new <- "https://data.ssb.no/api/v0/dataset/49626.csv?lang=no"
# Read data into 'pop' data frame
pop_changes <- read_delim(
url_csv_new,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE,
na = ".."
) %>% as_tibble()
pop_changes
# Rename columns
colnames(pop_changes) <- c("region", "year", "contents", "value")
pop_changes
# Convert data types
pop_changes <- pop_changes %>%
mutate(
year = as.numeric(year),
value = as.numeric(value)
)
# Define UI
ui <- fluidPage(
titlePanel("Norwegian Population Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("region_filter", "Select Region:",
choices = intersect(unique(pop$region), unique(pop_changes$region)),
selected = "0 The whole country"),
checkboxGroupInput("gender_filter", "Select Gender:",
choices = unique(pop$gender),
selected = unique(pop$gender)),
sliderInput("year_range", "Select Year Range:",
min = max(min(pop$year), min(pop_changes$year)),
max = min(max(pop$year), max(pop_changes$year)),
value = c(max(min(pop$year), min(pop_changes$year)),
min(max(pop$year), max(pop_changes$year)))),
selectInput("age_filter", "Select Age Group:",
choices = c("All Ages", unique(pop$age)),
selected = "All Ages")
),
mainPanel(
fluidRow(
column(6, plotOutput("popPlot")),
column(6, plotOutput("birthsDeathsPlot"))
),
fluidRow(
column(12, tableOutput("popTable"))
)
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive data for the first plot
filtered_data <- reactive({
data <- pop %>%
filter(
region == input$region_filter,
gender %in% input$gender_filter,
year >= input$year_range[1],
year <= input$year_range[2]
)
if (input$age_filter != "All Ages") {
data <- data %>% filter(age == input$age_filter)
}
data %>%
group_by(year, gender) %>%
summarise(totalPopulation = sum(population, na.rm = TRUE))
})
# Reactive data for the second plot
births_deaths_data <- reactive({
pop_changes %>%
filter(
region == input$region_filter,
contents %in% c("Live births", "Deaths"),
year >= input$year_range[1],
year <= input$year_range[2]
)
})
# Render the first plot
output$popPlot <- renderPlot({
ggplot(filtered_data(), aes(x = year, y = totalPopulation, color = gender)) +
geom_line() +
theme_minimal() +
labs(
title = paste("Population Trend in", input$region_filter),
x = "Year",
y = "Total Population",
color = "Gender"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
# Render the second plot
output$birthsDeathsPlot <- renderPlot({
ggplot(births_deaths_data(), aes(x = year, y = value, color = contents)) +
geom_line() +
theme_minimal() +
labs(
title = paste("Live Births and Deaths in", input$region_filter),
x = "Year",
y = "Number of People",
color = "Event"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
# Render the table
output$popTable <- renderTable({
filtered_data()
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Clear the workspace
rm(list = ls())
# Load required libraries
library(tidyverse)
library(shiny)
library(readr)
# Fetch and process data
url_csv <- "https://data.ssb.no/api/v0/dataset/1082.csv?lang=no"
# Read data into 'pop' data frame
pop <- read_delim(
url_csv,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE
) %>% as_tibble()
# Rename columns
colnames(pop) <- c("region", "gender", "age", "year", "statisticalVariable", "population")
# Verify column names
print(colnames(pop))
# Convert data types if necessary
pop <- pop %>%
mutate(
year = as.integer(year),
population = as.numeric(population)
)
# Verify unique regions and genders
print(unique(pop$region))
print(unique(pop$gender))
# Fetch and process data for the second dataset (Population changes)
url_csv_new <- "https://data.ssb.no/api/v0/dataset/49626.csv?lang=no"
# Read data into 'pop' data frame
pop_changes <- read_delim(
url_csv_new,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE,
na = ".."
) %>% as_tibble()
pop_changes
# Rename columns
colnames(pop_changes) <- c("region", "year", "contents", "value")
pop_changes
# Convert data types
pop_changes <- pop_changes %>%
mutate(
year = as.numeric(year),
value = as.numeric(value)
)
# Define UI
ui <- fluidPage(
titlePanel("Norwegian Population Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("region_filter", "Select Region:",
choices = intersect(unique(pop$region), unique(pop_changes$region)),
selected = "0 The whole country"),
checkboxGroupInput("gender_filter", "Select Gender:",
choices = unique(pop$gender),
selected = unique(pop$gender)),
sliderInput("year_range", "Select Year Range:",
min = max(min(pop$year), min(pop_changes$year)),
max = min(max(pop$year), max(pop_changes$year)),
value = c(max(min(pop$year), min(pop_changes$year)),
min(max(pop$year), max(pop_changes$year)))),
selectInput("age_filter", "Select Age Group:",
choices = c("All Ages", unique(pop$age)),
selected = "All Ages")
),
mainPanel(
fluidRow(
column(6, plotOutput("popPlot")),
column(6, plotOutput("birthsDeathsPlot"))
),
fluidRow(
column(12, tableOutput("popTable"))
)
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive data for the first plot
filtered_data <- reactive({
data <- pop %>%
filter(
region == input$region_filter,
gender %in% input$gender_filter,
year >= input$year_range[1],
year <= input$year_range[2]
)
if (input$age_filter != "All Ages") {
data <- data %>% filter(age == input$age_filter)
}
data %>%
group_by(year, gender) %>%
summarise(totalPopulation = sum(population, na.rm = TRUE))
})
# Reactive data for the second plot
births_deaths_data <- reactive({
pop_changes %>%
filter(
region == input$region_filter,
contents %in% c("Live births", "Deaths"),
year >= input$year_range[1],
year <= input$year_range[2]
)
})
# Render the first plot
output$popPlot <- renderPlot({
ggplot(filtered_data(), aes(x = year, y = totalPopulation, color = gender)) +
geom_line() +
theme_minimal() +
labs(
title = paste("Population Trend in", input$region_filter),
x = "Year",
y = "Total Population",
color = "Gender"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
# Render the second plot
output$birthsDeathsPlot <- renderPlot({
ggplot(births_deaths_data(), aes(x = year, y = value, color = contents)) +
geom_line() +
theme_minimal() +
labs(
title = paste("Live Births and Deaths in", input$region_filter),
x = "Year",
y = "Number of People",
color = "Event"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
# Render the table
output$popTable <- renderTable({
filtered_data()
})
}
# Run the app
shinyApp(ui = ui, server = server)
# Clear the workspace
rm(list = ls())
# Load required libraries
library(tidyverse)
library(shiny)
library(readr)
# Fetch and process data
url_csv <- "https://data.ssb.no/api/v0/dataset/1082.csv?lang=no"
# Read data into 'pop' data frame
pop <- read_delim(
url_csv,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE
) %>% as_tibble()
# Rename columns
colnames(pop) <- c("region", "gender", "age", "year", "statisticalVariable", "population")
# Verify column names
print(colnames(pop))
# Convert data types if necessary
pop <- pop %>%
mutate(
year = as.integer(year),
population = as.numeric(population)
)
# Verify unique regions and genders
print(unique(pop$region))
print(unique(pop$gender))
# Fetch and process data for the second dataset (Population changes)
url_csv_new <- "https://data.ssb.no/api/v0/dataset/49626.csv?lang=no"
# Read data into 'pop' data frame
pop_changes <- read_delim(
url_csv_new,
delim = ";",
locale = locale(encoding = "ISO-8859-1"), # Handles Norwegian characters
trim_ws = TRUE,
na = ".."
) %>% as_tibble()
pop_changes
# Rename columns
colnames(pop_changes) <- c("region", "year", "contents", "value")
pop_changes
# Convert data types
pop_changes <- pop_changes %>%
mutate(
year = as.numeric(year),
value = as.numeric(value)
)
# Define UI
ui <- fluidPage(
titlePanel("Norwegian Population Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("region_filter", "Select Region:",
choices = intersect(unique(pop$region), unique(pop_changes$region)),
selected = "0 The whole country"),
checkboxGroupInput("gender_filter", "Select Gender:",
choices = unique(pop$gender),
selected = unique(pop$gender)),
sliderInput("year_range", "Select Year Range:",
min = max(min(pop$year), min(pop_changes$year)),
max = min(max(pop$year), max(pop_changes$year)),
value = c(max(min(pop$year), min(pop_changes$year)),
min(max(pop$year), max(pop_changes$year)))),
selectInput("age_filter", "Select Age Group:",
choices = c("All Ages", unique(pop$age)),
selected = "All Ages")
),
mainPanel(
fluidRow(
column(6, plotOutput("popPlot")),
column(6, plotOutput("birthsDeathsPlot"))
),
fluidRow(
column(12, tableOutput("popTable"))
)
)
)
)
# Define Server Logic
server <- function(input, output) {
# Reactive data for the first plot
filtered_data <- reactive({
data <- pop %>%
filter(
region == input$region_filter,
gender %in% input$gender_filter,
year >= input$year_range[1],
year <= input$year_range[2]
)
if (input$age_filter != "All Ages") {
data <- data %>% filter(age == input$age_filter)
}
data %>%
group_by(year, gender) %>%
summarise(totalPopulation = sum(population, na.rm = TRUE))
})
# Reactive data for the second plot
births_deaths_data <- reactive({
pop_changes %>%
filter(
region == input$region_filter,
contents %in% c("Live births", "Deaths"),
year >= input$year_range[1],
year <= input$year_range[2]
)
})
# Render the first plot
output$popPlot <- renderPlot({
ggplot(filtered_data(), aes(x = year, y = totalPopulation, color = gender)) +
geom_line() +
theme_minimal() +
labs(
title = paste("Population Trend in", input$region_filter),
x = "Year",
y = "Total Population",
color = "Gender"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
# Render the second plot
output$birthsDeathsPlot <- renderPlot({
ggplot(births_deaths_data(), aes(x = year, y = value, color = contents)) +
geom_line() +
theme_classic() +
labs(
title = paste("Live Births and Deaths in", input$region_filter),
x = "Year",
y = "Number of People",
color = "Event"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
# Render the table
output$popTable <- renderTable({
filtered_data()
})
}
# Run the app
shinyApp(ui = ui, server = server)
